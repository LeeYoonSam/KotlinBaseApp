package com.ys.albertbaseproject

import android.os.StrictMode
import com.jakewharton.threetenabp.AndroidThreeTen
import com.ys.albertbaseproject.di.component.DaggerAppComponent
import com.ys.albertbaseproject.utils.CrashlyticsTree
import dagger.android.AndroidInjector
import dagger.android.DaggerApplication
import timber.log.Timber

class App: DaggerApplication() {
    override fun onCreate() {
        super.onCreate()

        // ThreeTenBP for times and dates, called before super to be available for objects
        AndroidThreeTen.init(this)

        // Enable strict mode before Dagger creates graph
        if (BuildConfig.DEBUG) {
            enableStrictMode()
        }
        super.onCreate()

        if (BuildConfig.DEBUG) {
            Timber.plant(Timber.DebugTree())
        } else {
            Timber.plant(CrashlyticsTree())
        }
    }

    /**
     * Tell Dagger which [AndroidInjector] to use - in our case
     * [com.ys.albertbaseproject.di.component.AppComponent]. `DaggerAppComponent`
     * is a class generated by Dagger based on the `AppComponent` class.
     */
    override fun applicationInjector(): AndroidInjector<out DaggerApplication> {
        return DaggerAppComponent.factory().create(this)
    }

    private fun enableStrictMode() {
        StrictMode.ThreadPolicy.Builder()
            .detectDiskReads()
            .detectDiskWrites()
            .detectNetwork()
            .penaltyLog()
            .build()
    }
}